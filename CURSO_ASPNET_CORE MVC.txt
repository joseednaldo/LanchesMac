#######################
CURSO UDEMY
#######################

:: Descrição ::
Este curso apresenta os principais conceitos da ASP .NET Core MVC aplicados na criação de um site para vendas de
lanches funcional. Você vai criar do zero um site web dinâmico e aprender diversos conceitos relacionados ao desenvolvimento web usando 
a tecnologia ASP .NET Core MVC e o Entity Framework Core.

Com os conceitos aprendidos você estará apto a criar seus próprios sites usando os principais recursos da 
ASP .NET Core MVC a tecnologia mais moderna e atual da Microsoft para desenvolvimento web.


:: O que você aprenderá :: 
Ao final do curso os alunos terão os conhecimentos necessários sobre ASP .NET Core MVC e Entity Framework Core para criar web sites








launchSettings.json   	= configração do localhost
appsettings.json  		= arquivo de configuracao , seria o equivalente ao web.config, connectionString do banco de dados.
Program.cs  			= inicializa a aplicação onde é feita a configuração do host / servidor.
Startup.cs 				= configura os servicos... que vai ser usado.

-- OBJETIVO DO MVC - BAIXO ACOPLAMENTO... 
MODEL 		-> RESPONSAVEL POR MANTER OS DADOS E A "LÓGICA DE NEGOCIO" DA APP.
VIEW 		-> INTERFACE COM O USUARIO DA APP QUE EXIBE OS DADOS.  
CONTROLLER  -> RECEBE E TRATA AS REQUISIÇÕES(DO BROWSER/USUARIO) E RENDERIZA A VIEW APROPRIADA COM OS DADOS.


MODELO DE MVC :
URL-> não é uma página.
-NO MODELO DE DESENVOLVIMENTO MVC UMA "URL" CORRESPONDE A UMA "AÇÃO" DE UM "CONTROLER" E NÃO UMA PÁGINA EM DISCO..
-NO MODELO DE DESENVOLVIMENTO MVC  AS REQUISIÇÕES DO NAVEGADOR (USUÁRIO) SÃO MAPEADAS PARA "AÇÕES" DO "CONTROLLER"

EX:
HTTP://LOCALHOST/HOME/INDEX 
HOME 	= CONTROLLER
INDEX 	= ACTION/ AÇÃO


###################FUNCIONAENTO DO PROJETO###############

ARQUIVO:
Startup: -> função -> ConfigureServico


PASTA SHARED  = ARQUIVOS / LAYOUT COMPARTILHADO EX: BARRA DE MENU.
TAMBÉM OS JS,JQUERY E BOOTSTRAP.


PROJETO.CSPROJ = MOSTRA AS DEPENDEÇAS DO PROJETO.


##########################################################

MIGRANDO - PARA VERSÃO 3.1 DO CORE.

##########
MODELO
##########
CRIANDO O MODELO DE DOMINIO
-SÃO AS CLASSES QUE REPRESENTAM A SUA LÓGICA DE NEGÓCIO.
EX: PRODUTO.CS / CLIENTE.CS / CIDADE.CS ETC.

###################################
	AULA 11 - ENTITY FRAMEWORK CORE
####################################
Ferramento que permite ao desenvolvedor trabalhar com dados relacionais na forma de objtos especificos do domonio.

OBJETOS     |   MAPEADOR OBJETO      / BANCO DE DADOS.


DBCONTEXT    						  |  DBSET
REPRESENTA BANCOD DE DADOS			 	TABELAS

LINQ -> DBCONTEXT  -> DBSET
	    DBCONTEXT  <- DBSET		

AÇÕES: DO ENTITY
ALTERAR,EXCLUIR E INCLUIR


############
CODE FISRT   /MODELO USADO NO RCI...
###########
CRIAMOS AS CLASSES DE DOMINIO E O ENTIRY FRAMEWORK CRIAR O BANCO/TABELAS


##############
DATABASE FISRT
##############
PARTIMOS DO BANCO DE DADOS JÁ EXISTENTES E USAMOS O ENTIRY FRAMEWORK CORE OARA GERAR AS CLASSES DE DOMINIO.

		
######################################################################
	AULA 12 - CONFIGURANDO O ENTITY FRAMEWORK CORE
#######################################################################
ADD PACOTES:
MICROSOFT.ENTITYFRAMEWORK.CORE 3.1.3.
MICROSOFT.ENTITYFRAMEWORK.SQLSERVER 3.1.3.
MICROSOFT.ENTITYFRAMEWORK.TOOLS 3.1.3.
Microsoft.VisualStudio.Web.CodeGeneration.Design 3.1.3.


DBCONTEXT 	=  REPRESENTA A SESSÃO COM O BANDO DE DADOS.
DBSET 		= REPRESENTA O MAPEAMENTO  PARA A TABELAS DO BANCO DE DADOS.

APPSETTING.JSON  = STRING DE CONEXÃO COM  BANCO DE DADOS.

############################################################
REGISTRAR NO ARQUIVO  "STARTUP" O CONTEXTO COMO SERVIÇO.
#########################################################
EX:
SERVICES.AddContext<AppDbContext>(
options = > options.UseSqlserver(Configation.GetConnectionString("DefaultConnection")))
)

Startup.cs:
onde configurações a contexto e conectionstring.


######################################################################
	AULA 13 - AJUSTE CONFIGURANDO O ENTITY FRAMEWORK CORE
#######################################################################


######################################################################
	AULA 14 - USANDO O DATA NOTATION
#######################################################################
RECURSO USADO PARA VALIDAR ENTRADA DE DADOS E TAMBÉM PODEMOS USAR 
COM REGRA DE NEGOCIO 
EX: VALIDAR CARTÃO DE CRÉDITO , CPF, EMAIL.


######################################################################
	AULA 15- AJUSTO DATA  NOTATION
#######################################################################
COLOCAR NAS PROPRIEDADE
[COLUMN(TypeName="decimal(18,2)")]
public decimal Preco {get;set;}


######################################################################
	AULA 16- USANDO EF  CORE MIGRATION
######################################################################
Gerencia o versionamento do banco de dados.

Métodos:
add-migration nome_migração        - cria script
update-database     			   - aplica o script no sqlserver (banco)
remove-MIGRATION 					= desfazer a ação feita.


######################################################################
	AULA 17- POPULANDO BANCO DE DODOS COM MIGRATION
######################################################################
USAMOS O MIGRATION PARA MANIPULAR AS TABELAS SEJA OS DADOS.
Criamos mi grationa -> 20200522204440_PopularTabelas
Os dados foi criando via migration.
Esse cenario é bom como quero criar paramentros de alguns tabelas de 
sistemas.

######################################################################
	AULA 17- AJUSTE - POPULANDO BANCO DE DODOS COM MIGRATION
######################################################################


######################################################################
	AULA 20- IMPLEMENTANDO O PADRÃO REPOSITORY
######################################################################

::  FLUXO REQUISIÇÕES  ::
SENARIO ACEITO - PARA DIMINUIR O ACOPLAMENTO.   "PADRÃO REPOSITORY"
[IIS] -----> [CONTROLLER] -----> [REPOSITORY] ----> [EF CORE] ---> (BANCO DE DADOS)

O QUE É O PADRAO [REPOSITORY]
È UM PADRÃO ESTRUTURAL QUE SEPARA A SUA "LÓGICA DE DOMINIO" DA SUA LÓGICA DE "ACESSO A DADOS".
PODEMOS USAR O PADRÃO REPOSITORY PARA DESACOPLAR O "MODELO DE DOMINIO" DO "CÓDIGO DE ACESSO A DADOS".
VANTAGENS:
1-DESACOPLA A SUA APLICAÇÃO DA LÓGICA DE ACESSO A DADOS.
2-CENTRALIZA O SEU CÓDIGO PARA CONSULTAS  E ACESSO AOS DADOS.
3-FACILITA OS TESTES UNITÁRIOS.
4-MINIMIZA A DUPLICIDADE DE CODIGO NAS CONSULTAS.


:: COMO IMPLENTATAR O PADRAO REPOSITORY ::
Implementação.

[INTERFACE]										<--------------- [CLASSE  CONCRETA]  a classe concreta vai herda os metodos da interface
NA INTERFACE DEFIMOS TODOS OS "MÉTODOS" QUE VOU USAR.

Exemplo com os dominios - Lanche e Categoria
[ILancheRepository] 	<----- [LancheRepository]  		= HERDA A INTERFACE
[ICategoriaRepository] 	<----- [CategoriaRepository] 	= HERDA A INTERFACE



######################################################################
	AULA 20- IMPLEMENTANDO O PADRÃO REPOSITORY
######################################################################
[ILancheRepository] 	<----- [LancheRepository]  		= HERDA A INTERFACE
[ICategoriaRepository] 	<----- [CategoriaRepository] 	= HERDA A INTERFACE
Nesse contexto que esta referenciando o EF é o repository.


::: IMPORTANTISSIMO  ::
QUANDO USAMOS UMA "INTERFACE" PRECISAMOS FAZER UM "INJEÇÃO DE DEPENDENCIA" PARA USA-LO NO "CONTROLADOR".
OU SEJA QUANDO "DEFINIMOS UMA INTERFACE E SUA IMPLEMENTAÇÃO" TEMOS QUE "REGISTRAR ISSO COMO UM "SERVIÇO"
PRA FAZER "INJEÇÃO DE DEPENCIA NO CONTROLLER".

::: COMO CRIAR O SERVIÇO.
    FAZEMOS ISSO NA CLASSE "STARTUP.CS"
	
TEMOS:
1-AddTransient  => Significa que o serviço vai ser criado cada vez que ele for solicitado.
3-AddSingleton  => Significa que vai ser criado na primeira que for solicitado. ou seja toda as as requisições vai ter esse mesmo objeto.
2-AddScoped  	=> Significa que o serviço é criado uma  vez pra cada solitação.


ex:
//Registrando como serviço minhas interfaces pra ser usado nos controles... 
//specified = especificado  / transient = transitorio
services.AddTransient<ICategoriaRepository, CategoriaRepository>();
services.AddTransient<ILancheRepository, LancheRepository>();

Apos isso , chamamos por denpencia o serviço no controller.

######################################################################
	AULA 21- CRIANDO CONTROLLER E VIEW PARA MOSTRAR OS LANCHES...
######################################################################
Criando a  injecção de pencendia entre contoller e serviço.

EX:
private readonly ILancheRepository _lancheRepository;
	private readonly ICategoriaRepository _categoriaRepository;

	public LancheController(ILancheRepository lancheRepository,
		ICategoriaRepository categoriaRepository)
	{
		//injeção de pendencia das interfaces...
		// quando o controlador for chamar ILancheRepository , como eu tenho um serviço registrado pra ele , vamos recuperar a instancia da implementação da interface => "lancheRepository"
		_lancheRepository = lancheRepository;
		_categoriaRepository = categoriaRepository;

	}
	

::: TIPOS DE RETORNO ::
IActionResult  = RETORNA UM ActionResult  QUE PODE SER UMA ViewREsult, pode ser diversoes tipos de retorno.


######################################################################
	AULA 22- AJUSTANDO O CODIGO DA  VIEW LIST
######################################################################
O QUE SIGNIFICA=>
@model IEnumerable<LanchesMac.Models.Lanche>
@model = Ultilizada para especificar o tipo  que vamos usar na view ou seja o modelo de dados.
No caso acima fala que esotu usando uma lista do tipo "lanches" ou seja estou usando o modelo/tabela/class lanche
Outro exemplo de uso:
@using LanchesMac.Models
@model IEnumerable<Lanche>

@model => é apenas a diretiva que aponta para o "tipo lanche" ou seja aponta para o "modelo" que vou usa.
Model  => é ultilizada apenas para acessar o tipo que é passada na view.
Ou seja permiti acesso ao "a lista do tipo lanche". è a propriedadeidade que acessa o tipo.

############################################################################
	AULA 23 QUAL O PAPEL DOS ARQUIVOS _ViweStart,_ViewImports e o BOOTSTRAP
############################################################################
-Layout.cshtml  = comum para todas as telas, ou seja é um arquivo que mostrado em 
todas as telas ex: rodade,footer etc...logo...menu
Carregamos os arquicos de style css..

No @RenderBody() = è onde as telas(views) é renderizada.

_ViweStart = È Através do _ViweStart que => as views sabe qual é o "arquivo de layout" que ele tem que utilizar.


_ViweImports.cshtml =   O objetivo dele é conter todas as referenças e import comum em todas as "VIEWS"
Ex:
@using LanchesMac   		= referencia o projeto 
@using LanchesMac.Models 	= referencia a model   (posso tirar das views o using lanhesMec.Model)
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers  = significa que a ultilização das tags helper estão habilitadas.

############################################################################
	AULA 24 			VIEW MODEL
############################################################################
É UM PADRÃO QUE PERMITE SEPARAR AS RESPONSABILIDADES  ENTRE MODELS DE DOMINIO
E OS MODELS QUE ATENDEM AS WIEWS.

PERMITE "MODELAR" ENTIDADES A PARTI DE UM OU MAIS "MODELS" EM UM UNICO OBJETO QUE SERÃO REPRESENTADOS
NA VIEWS.
"MODELS DE DOMINIO" REPRESENRA O MODELO DE NEGOCIO.

1-SENARIO  = TEMOS QUE APRESENTA A VIEW INFORMAÇÕES ORIUNDAS DE 2 OU MAIS MODELOS,
NESSE CENARIO A "VIEWMODEL" NOS AJUDA. PODE CAPSULAR VARIOS MODELS EM UM OBJETO.

BENEFICOS DA VIEWMODEL.
1-NAO PRECISA ALTERAR UMA CLASSE "MODEL"  PARA ATENDER AS NECESSIDADES DE UMA VIEW.
2-AGRUPAR INFORMAÇÇÕES  DE UMA OU MAIS "MODELS" EM UMA UNICA CLASSE, POUPANDO NECESSIDADE DE FAZER VARIAS CONSULTAS.
3-UM DADO NÃO CONTIDO NO "MODEL" DE DOMINIO PODE SER FIALCIMENTE TRANSPORTADO PARA VIEW MODEL.
4-cada viewmodel possui uam view tipada.
5-atua como modelo pra view.
6-contem a logica de interface e a referencia ao model.

dica:
se exxistem informações em seu model que são ultilizados somente pelas views entao o seu Model esta com a responsabilidade 
também de cuidar da camada de apresentação.
o melhor é criar uma viewmodel.


############################################################################
	AULA 25 			IMPLEMENTANDO A VIEW MODEL
############################################################################
Posso usar nos meus controles a "viewmodel" para recuperar os dados , ao invés
de usar a "model" direta.
Ao invés de usar  a conexão direta com a model, podemos usar uma viewmodel para
desacoplar.



############################################################################
	AULA 26 		_ViewImports VIEWS
############################################################################
UMA PARTIAL VIEW É UAM VIEW QUE É "RENDERIZADA" EM OUTRA => VIEW.
ELAS SÃO USADAS PARA ENCAPSULAR A LÓGICA REUTILIZADA NAS  VIEWS
PERMITINDO SIMPLIFICAR A COMPLEXIDADE DAS VIEWS.
ELAS PODEM SER USADAS EM MULTIPLAS VIEWS ONDE É NECESARIO
UMA LÓGICA SIMILAR EVITANDO ASSIM A DUPLICIADADE DE CODIGO.
-POSSUI A EXTENSÃO .CSHTML
-SAO RENDERIZADAS DE FORMA DIFERENTE (NÃO EXECUTAM _ViweStart.CSHTML

############################
REFERENCIANDO PARTIAL VIEWS
############################
Exemplo 1 => mais usual
@HTML.PARTIAL("NomeDaView")                           ->  Retorna um IHTMLSTRING

Exemplo 2Da
 Html.RenderPartial("NomeView");
} 
Não retorna um resultado. 
Transmite a saida renderizada diretamente para a resposta.


########################################
ACESSANDO DADOS NAS PARTIAL VIEWS
########################################
QUANDO UMA PARTIAL VIEW É INSTANCIADA ELA OBTÉM UMA CÓPIA DO VIEWDATA DA VIEW PAI.
EX:
@Html.Partial("NomeDaView", ViewData)
@Html.Partial("NomeDaView", model)

Podemos usar: partial,RenderPartial,PArtialAsybc e RenderPartialAsync
Obs:
As atualziações feitas nos dados da "PARTIAL VIEW", não são mantidas na view principal.
o viewdata alterado em uma partial view é perdido quando ela retorna.

########################################
LOCALIZANDO PARTIAL VIEWS
########################################

@Html.Partial("NomeView")=> usa a view autal na pasta com este nome, s enada for encontrado, procura naá
pasta shared.
@Html.Partial("NomeView.cshtml"), uma view com este nome deve existir na mesma pasta.
@Html.Partial("~/views/folder/NomeView.cshtml")=> Caminhos que iniciam com "/" ou "~/" refere-se á raiz da aplicação.


########################################
AUALA 27/28 - IMPLEMENTANDO PARTAIL VIEWS
########################################

A PARTI DA VERSÃO 3.1
TEMOS O JELP PARTIAL.
<PARTIAL NAME="_LanchesResumo" for="@lanche"/>

name=indica o noem ou caminho da partial view.
for=Atributo que permite passar um model para paetial view.


 
########################################
AULA - 29 CARRINHO DE COMPRA.
########################################
criamos a classe "carrinhoCompraIem"
e geramos o migration pra criar a tabela no banco.
add-migration "carrinhoCompraIem"
update-database  -- pra criar no banco...

##########################################
AULA - 30 SESSAO E O ESTADO DA APLICAÇAO.
##########################################

PROTOCOLO HTTP -  PROTOCOLO SEM ESTADO
ASP.NET  CORE
PACOTE DA MICROSOFT ->SESSION : MICROSOFT.ASPNETCORE.SESSION. 

COM BASE EM UM DICIONARIO OU TABELA HASH BO SERVIDOR, O ESTADO DA SESSÇAO PERSISTE OS DADOS ATRAVÉS DAS REQUISIÇÕES DE UM NAVEGADOR.
O ASP.NET CORE MANTEM O ESTADO DA SESSÃO , DANDO AO CLIENTE UM COOKIE QUE CONTEM UM "ID" DA SESSSÃO, QUE É ENVIADO AO SEEVIDOR COM CADA SOLICITAÇÃO.
PODEMOS USAR O "ESTADO DA SESSÃO" PARA GUARDA DADOS USUARIO ENQUANTO ELE NAVEGA NA APLICAÇÃO.

OS DADOS FICAM ARMAZENADO NO CACHE....


OS COOKIE DE SESSÃO TEM UM TEMPO DE VIDA, SÃO EXCLUIDO QUANDO A SESSÃO DO NAVEGADOR TERMINA.


O SERVIDOR MANTEM UMA SESSÃO POR TEMPO LIMITADO APÓS A ÚLTIMA REQUISIÇÃO.
VOCE PODE DEFINIR O TEMPO LIMITE DA SESSÃO OU USAR O VALOR PADRÃO QUE É DE 20 MINUTOS.
O ESTADO DA SESSA~P É IDEAL PARA ARMAZENAR DADOS DO USUÁRIO ESPECIFICO DE UMA DETERMINADA SESSÃO, FICAM NO CACHE
E VÃO SER EXCLUINDO QUANDO : A SESSÃO EXPIRAR OU SE USAR O RECURSO SESSION.CLEAR();

ONDE CONFIGURAMOS:
CLASSE "STARTUP" DEVE CONTER.   IDistributedCache
chamada da  => AddSession em configureSerevice()
chamada da  => UseSessin em configure()

ex:
Public void ConfigureServies(IServiceCollection services)
{
  //Adiona uma implementação padrão de IDistributedCache.
  servives.AddDistributedMemoryCache();
  services.AddSession();
}

public void Configure(IApplicationBuider app, IHosttingEnvironment){
	
	app.UseSession();
	app.Run(async(context)=>{
			
			await context.Response.WriteAsync(msg.GetMensagem());
	});
}

Exemplo de como armazena dados na sessão.

-criando variavaes
const string SessionKeyNome="_Nome";
const string SessionKeyIdade ="_Idade";

--Fazendo atribuições na sessão
httpContext.Session.SetString(SessionKeyNome,"ednaldo");
httpContext.Session.SetInt32(SessionKeyIdade,37);

--recuperando os dados da sessão.
var nome = context.Session.GetString(SessionKeyNome);
var idade = context.Session.GetString(SessionKeyIdade);


################################################
AULA - 31 IMPLEMENTANDO O CARRINHO DE COMPRAS
################################################
Configrando a session e serviços do carrinho.

CarrinhoCompraItem.cs ->representa um lanche selecioando
-CarrinhoCompra.cs -> representa uma coleção lanches selecionados
-GetCArrinho=> ontem ou cira um carrinho de compra na sessão
-AdcionarAoCarrinho => Adcionar um lanche ao carrinho
-RemoverAoCarrinho=> remove um lanche do carrinho
-GetCarrinhoCompraItens=> retorna os itens do carrinho de compra
-LimparCarrinho=> remove todos os itens do carrinho
-GetCarrinhoCompraTotal - calcula o total do carrinho.

 
 ### ARQUIVO SETUP ###
services.AddTransient<ICategoriaRepository, CategoriaRepository>();  // =>transient , significa que o objeto vai ser criado toda vez que for chamado, criando um novo objeto desse servico.
services.AddTransient<ILancheRepository, LancheRepository>();
services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();   //=> AddSingleton   => é instanciado uma única vez... ou seja todas as chamadas "requisições" obtém o mesmo objeto.
services.AddScoped(sp => CarrinhoCompra.GetCarrinho(sp));             //=> é criado instancia diferentes do objeto pra cada requisição...

			

############################################################
AULA - 32 IMPLEMENTANDO O CONTROLLER DO CARRINHO DE COMPRAS
############################################################
criar uam viewmodel pra representa a view.





############################################################
AULA - 33 CRIANDO PAGINA INICIAL -LANHCES PREFERIDOS.
############################################################
HOMECONTROLES
DICA:
"PARTIAL VIEW" E VIEW É A MESMA COISA A UNICA DIFERENÇA É QUE UMA PARTIAL VIEW NAO INVOCA O ARQUIVO "WIEW START", QUANDO  É CARREGADA.


############################################################
AULA 34 VIEW COMPONENTS
############################################################

PERMITE CRIAR  FUNCIONALIDADES SEMELHANTES A UM "MÉTODO ACTION" DE UM CONTROLADOR INDEPENDENTE DE UM CONTROLADOR(SÃO SEMELHANTES ÁS PARTIAL VIEW).
CONSITEM 2 DUAS PARTRS: 
1-A CLASSE "DERIVADA DE VIEWCOMPONENTE"
2-O RESULTADO QUE ELA RETORNA UMA VIEW.


CRIANDO UAM VIEW COMPONENTS
1-UMA CLASSE VC PODE SER CRIADA:

A) DERIVADA DE UM VIEWCOMPONENTE
B)DECORANDO A CLASSE COMO O ATRIBUTO  [VIEWCOMPONENT]
C)CRIANDO UMA CLASSE ONDE O NOME TERMINA COM O SUFIXO "VIEWCOMPONENT"

DEVE SER PUBLICA , NÃO ANINHA NEM ABSTRATA
A CLASSE DEVE EXPOR O MEOTODO PULICO "INVOKEaSYNC"
NOME =  NOME_DA_CLASSEVIEWCOMPONENTE  EX: TesteViewComponent


####
RETORNO
####

CRIANDO UMA VIEW COMPONENT (VC)

2-O RESULTADO QUE ELA RETORNA (UMA VIEW).

-A view retornada dever ser criada na pasta:
-Views/Shared/COMPONENTS/nome_vc
-onde o nome é o nome do prefixo usado na VC criada.

EX:
VC "Teste"ViewComponent  
"devera" ter sua view criada na pasta : / View/Shared/COMPONENTS/"Teste"

caso nao seja definido o nome da view , será definido como default.html.

###########################
USANDO UAM VIEWCOMPONENT
##########################

1- A PARTI DE UMA VIEW.
@COMPONENT.InvokeAsync("nome_vc",<tipo anonimo com parametros>)

A PARTI DO ASP.NET CORE 1.1, PODEMOS INVOCAR UMA VC USANDO UMA "TAG HELPER".
EX:
<vc>nome_vc param="...."></vc:nome_vc>
	

DEVEMOS USAR A DIRETIVA @ADDTAGHELPER;"NOME DO ASSEMBLY"
"NOME DO ASSEMBLY"   =  NOME DO PROJETO.


2- PODEMOS USAR USAR TAMBÉM  A PARTI DO  CONTROLADOR.
EX: Return ViewComponent("nome_vc",new {parametros="..."})

Public IACtionResult IndexVC(){
  Return ViewComponent("Lista",new {sequncia de parametros="..."});
}

############################################################
AULA 35 IMPLEMENTANDO UMA VIEW COMPONENTS
############################################################
VC  = VIEWCOMPONENT
OBJETIVO: EXIBIR A QUANTIDADE DE ITENS NO CARRINHO DE COMPRAS NA BARRA DE NEVEGAÇÃO.

1-PASSO:
CRIAR PASTA "COMPONENTE"
DEFINIR CLASSE CarrinhoCompraResumo  , DERIVANDO DE UM ViewC.
DEFINIR O CODIGO DO MÉTODO INVOKE

2- PASSO
CRIAR UMA PASTA COMPONENTS NA PASTA SHARED.
CRIAR A PASTA CarrinhoCompraResumo DENTRO DA PASTA COMPONENTS
CRIAR A VIEW DEFAUT.CSHTML



DICAS:
VIEW COMPONENTS.
PERMITEM CRIAR "FUNCIONALIDADES" SEMELHANTE A UM "MÉTODO ACTION" DE CONTROLLADOR INDEPENDENTE DE UM 
CONTROLADOR. È SEMELHANTE ÁS PARTIAL VIEWS.


CONSSITEM EM DUAS PARTES:
1-A classe (derivada de VewComponent)
2-O resultado que ela retorna "uma view"

Dicas: São reaproveitaveis.
Podemos usar em varias aplicações, ou  usadas em diferentes controladores.
Ex: carinho de compr ou qualquer coisa que quero usar seja em varios comntroladores ou aplicações através de uma bibilioteca.


############################################################
AULA 36 TAG HELPTERS
############################################################
Permite que o código do lado do servidor participe na criação e "redereização" de "elementos html" em arquivos Razor.
Elas são uma sintaxe alternativa aos "html helpers" e obtém o mesmo resultado final gerando codigo html.
paracido com html mas é processado pelo razor no servidor.



ex:
TAG HELPER                                  				RENDERIZADO

<input type="text" asp-for="Nome"/>      					<input id="nome" name="nome" tyoe="text" value=""/>
<label  asp-for="E-mail"<label/>         					<label for="Enail">E-mail</label>
<form asp-controller="Conta" asp-action="login"</form>		<form action="/Conta/Login" method="post"> </form>

Dicas:
A diretiva @addTagHelper    - torna as tags helpers disponiveis para um view.

Esse recurso é criado automaticamente no arquivo   Views/_ViewImports.chtml

**************************************
ELEMENTOS PARA USAR O TAG HELPERS:
**************************************
Input tag helper
Text area tag helpers
Validation tag helper
Label tag helper
Select tag helper
asp-for,asp-controller,asp-action



############################################################
AULA 37 USANDO A TAG HELPTERS
############################################################
COLOCAR NA VIEWIMPORTS

@addTagHelper LanchesMac.TagHelpers*, LanchesMac


############################################################
AULA  38 DEFININDO UMA NOVA ROTA NA APLICAÇÃO
############################################################

EXIBIR LANCHES POR ACATEGORIA
-REDEFINIR A VIEW LIST.CSHTML
 RETORNANDO LANCHES POR CATEGORIA 
 
-DEFINIR UMA NOVA ROTA
--INLCUINDO  A CATEGORIA.

##
rota padrao
###

app.UseEndpoints(endpoints =>
{
	endpoints.MapControllerRoute(
		name: "default",
		pattern: "{controller=Home}/{action=Index}/{id?}");
});

Caso so esteja usando a roda padrao posso usar o comando abaixo pra substitui o a rota padrao.

app.UseMvcWithDefaultRoute();



##############################
CRIANDO UAM NOVA OUTRA ROTA
##############################

Usamos o metodo :
MaRoute -> usado  para adcionar / criar uma rota na coleção de rotas.
As rotas na coleção routers são ordenadas e serão processadas na ordem na qual foram adcionadas.

MapRoute usar 3 parametros : name,url r default
Name: é o nome da rota
url: é o padrao da URL onde definimos a url e os parametros  entre {}.
default: é o mapeamento padrão;

DICAS: è importante definir a rota na ordem correta.


############################################################
AULA  39/40 
############################################################

DICAS:
VIEW COMPONENTS.
PERMITEM CRIAR "FUNCIONALIDADES" SEMELHANTE A UM "MÉTODO ACTION" DE CONTROLLADOR INDEPENDENTE DE UM 
CONTROLADOR. È SEMELHANTE ÁS PARTIAL VIEWS.


CONSSITEM EM DUAS PARTES:
1-A classe (derivada de VewComponent)
2-O resultado que ela retorna "uma view"

Dicas: São reaproveitaveis.
Podemos usar em varias aplicações, ou  usadas em diferentes controladores.
Ex: carinho de compr ou qualquer coisa que quero usar seja em varios comntroladores ou aplicações através de uma bibilioteca.


aAplicamos o conceito de viewComponents.
criamos a CategoriaMenu.




############1################################################
AULA  41 /42  exibindo detalhes do lanche     -  fazer...
############################################################

-incluir botao para selecionar lanche e link oara exibir detahes do lanche.
1-ajustar partial view _lancheResumo
2-criar método action Details no controlador LancheController.
3-criar ciew  Details.cshtml


[BindNever => a propriedade nao vai ser vinculada ao formulario.
[ScaffoldColumn(false)] => indica que o campo nao vai ser visivel na view.
public decimal PedidoTotal { get; set; }


criando o migration das duas novas tabelas.
add-migration Pedidos
update-database


############1################################################
AULA  43 criando o repositorio e implementação  para o pedido.
############################################################
1-criar interface IpedidoRepository
2-criar classe para implementar a interface  ->  PedidoRepository
   
2- Registrar  o serviço no metodo "ConfigureServices" da classe "Startup" services.AddTransient<IpedidoRepository,PedidoRepository>();



############################################################
AULA  44 - PROCURANDO LANCHES
############################################################
criamos uma action na contoller  Lanhce.
Procurar
ok.



############################################################
AULA  45 - CRIANDO CONTROLADOR PEDIDO
############################################################

GET = OBTENDO DADOS 
POST=POSTAR / GRAVAR/PERSISTI DADOS NO BANCO.



############################################################
AULA  46 - exibindo detalhes do pedido
############################################################

VIEWBAG = É UMA PROPRIEDADE DINAMICA BASEADA NO RECURSO DYNAMIC DA PLATAFORMA NET.
USADO PARA PASSAR DADOS DO CONTROLLER PARA VIEW.

TEMPDATA =  AJUDA NA MANUTENÇÃO DE DADOS QUANDO VOCE SE MOVE DE UM CONTROLADOR PARA OUTRO CONTROLADOR. PARA MANTER OS DADOS ELE UTILZA UMA VARIAVEL
DE SESAÕ (INRERNAMENTE).
USADO PARA PASSAR DADOS DE CONTROLLER PARA OUTRO CONTROLLER.
SEMELHANTE A UMA SESSAO DE CURTA DURAÇÃO,SAUR DADOS SIMPLES.


############################################################################
AULA  47 - exibindo detalhes dpo lanche do pedido na paginaChecoutCompleto
############################################################################
chmando a view:  return View("~/Views/Pedido/ChekoutCompleto.cshtml",pedido);



SEÇÃO 6:AUTENTICACAO E AUTORIZACAO - IDENTITY
###############################################################
AULA  48 - IMPLEMENTANDO A AUTENTICAÇÃO E AUTORIZAÇÃO
PODEMO CRIAR UMA TEMPLATE
###################################################################

--AUTENTICAÇÃO => VERIFICAÇÃO DE UMA IDENTIDADE FEITA PELA COMPARAÇÃO DAS CREDENCIAS APRESENTADAS COM OUTRAS PRE´DEFINIDAS;  (QUEM É)
--AUTORIZAÇÃO =>OCORRE APÓS A "AUTENTICAÇÃO" E PERMITE ATRIBUIR E DEFINIR  PRIVILEGIOS AO SUJEITO AUTENTICADO.
TEM HAVER COM "O QUE O USUÁRIO PODE FAZER."


DICAS: AO CLIAR PORJETO ESCOLHEMOS O "CHANGE  AUTHENTICAITION"
E SELECIONAR A OPÇÃO  "INDIVIDUAL USAR ACCOUNTS"



###############################################################
AULA  49   - USANDO O IDENTITY
###################################################################

-IDENTITY => SISTEMA DE ASSOCIAÇÃO QUE PERMITE REGISTRAR USUAIO E CRIAR CONTA PARA O LOGIN.
PACOTE NECESSARIOS: PRESENTES EM : NUGET-> MICROSOFT.ASPNETCORE.ALL
 MICROSOFT.ASPNETCORE., MICROSOFT.ASPNETCORE.IDENTITY.IDENTITYFRAMEWORKCORE


-MUDAR A CLASSE DE CONTEXTO
DE: AppDbContext : DbContext 
PARA:
AppDbContext : IdentityDbContext<IdentityUser> 

-CONFIGURAR O SERVIÇO:
 NO METODO CONFIGUREsERVICES INCLUO OS NOVOS SERVIÇOS.
 
-- MIGRATION
usado para clicar as novas tabelas par controle de usuarios.

###############################################################
AULA  50 - Implementando o Login
###############################################################

-- criação do LoginViewModel.
-- criação do controller



###############################################################
AULA  51 - Implementando o Registro
###############################################################

- CRIAR METODO ACTION REGISTER (GET/POST)
- USAR O FILTRO "VALIDATEANTIFORGERYTOKEN"  - PRA EIVTAR ATAQUE
- CRIAR UM METODO ACTION LOGOUT (HTTTPOST)

ex: metodo
As palavras-chave async e await em C# são a parte central da programação assíncrona.
A programação assíncrona é um poderoso recurso da linguagem C# que permite que você continue com a execução do seu programa na thread principal enquanto uma tarefa de 
longa duração é executada na sua própria thread separadamente da thread principal.
[HttpPost]
[ValidateAntiForgeryToken]   // esse filtro indica que para executar esse metodo precisa ser autenticado com um token valido.
public async Task<IActionResult>Register(LoginViewModel registeVM)
{
	comandos...
}



###################################################################
AULA  52 -CRIANDOAS VIEWS LOGIN/REGISTER
###################################################################

1-CRIAR A VIEW LOGIN.CSHTML
2-CRIAR A VIEW REGISTER.CSHTML
-CRIAR A VIEW LOGOUT.CSHTML
4-CRIAR A PARTIAL VIRE _LOGINPARTIAL.CSHTML
5-AJUSTAR O CODIGO NO ARQUIVO _LAYOUT.CSHMTL

Moncerra2011A
<!--

    usando injecção de dependencia,
    estou utilizando o serviço IdentityUser.
    motivo:Usando a instancia da classe  "IdentityUser" pra saber se o usuario esta logado ou não.

-->
@inject SignInManager<IdentityUser> SignInManager





############################################
AULA  53 - IMPLEMENTANDO AUTORIZAÇÃO
############################################

EXEMPLO 1 : VIA CODIGO NO CONTROLADOR.
-PARA COLOCAR AUTENTICACAO NA CONTROLER.
OU SEJA O USUARIO SÓ CONSEGUE VER A PAGINA CASO ELE ENTRE NO SISTEMA.

-AUTENTICANDO A CONTROLER CONTATOS.
PUBLIC CLASS CONTATOCONTROLLER : CONTROLLER
{
	PUBLIC IACTIONRESULT INDEX()
	{
		IF (USER.IDENTITY.ISAUTHENTICATED)  // AUTENTUCANDO CONTROLLER.
		{
			RETURN VIEW();
		}

		RETURN REDIRECTTOACTION("LOGIN","ACCOUNT");
		
	}
}
-ESSE CONTROLE SO PODE SER ACESSADO SE O USUARIO LOGOU NO SISTEMA.

EXEMPLO 2 : VIA CODIGO NO CONTROLADOR.	
-PODEMOS USAR O O ATRIBUTO AUTHORIZE DO NAMESPACE: Microsoft.AspNerCore.Autorization
AUTHORIZE = PERMITE ACESSO SOMENTE A USUARIOS AUTENTICADOS (USADO NAS "CONTROLLERS" E "ACTIONS")

NOTATION
[Authorize]  				= Verifica somente se o usuario esta autenticado.
[Autorize(Roles="Admin")]	=Verifica somente se o usuario esta autenticado e pertence a o perfil Admin



--PERMITIR ACESSO ANONIMO USANDOO ATRIBUTO ALLOWANONIMOUS.
AllowAnonymous - permite acesso a usaurios não autorizados.
[AllowAnonymous]

OBS: PODEMOS USALOS EM ALGUM CONROLER QUE TAMBÉM TENHA P Authorize.


O QUE PRECISAMOS FAZER:
1-O QUE O USAURIOS ANONIMOS PODERÃO ACESSAR.
--AS PAGINAS DE LANCHE NORMAL E NATURAL
2-A  PAGINA TODOS OS LANCHES
3-A APAGINA PRINCIPAL
4-A PAGINA DE CONTRATO


O QUE SOMENTE USUARIOS AUTENTICADOS PODERÃO ACESSAR.
-FAZER A CONFIRMAÇAÕ DO PEDIDO
-INCLUIR UM ITEM NO CARRINHO
-REMOVER UM ITEM DO CARRINHO



###########################################
AUKA 54 - Seção 7:Área de Administração
##########################################
UMA ÁREA PODE SER DEFINIDA COMO UNIDADES FUNCIONAIS MENORES EM UM PROJETO
ASPNETCORE MVC COM SEU PROPRIO COMNUNTO DE CONTROLES , VIWES E MODELOS.
"QUANDO USAR"
SE SUA APLICAÇÃO FOR COMPOSTA DE MULTIPLOS COMPONENTES FUNCIONAIS DE ALTO NIVEL QUE DEVEM SER SEPARADAS LOGICAMENTE.

-SE VOCE DESEJA PARTICIPAR SEU MVC PAA QUE CADA FUNCIONAL POSSA SER TRABALHADA DE FORMA INDEPENDENTE.

== CARACTERISTICAS DAS AREAS
->UM APLICATIVO ASPNETCORE MVC PODE TER QUALQUER NUMEROS DE AREAS.
-> CADA AREA POSSUI SEUS PROPRIOS "CONTROALDORES",""MODLEOS" E VIEWS.
-> PERMITE ORGANIZAR GRANDES PROJETOS MVC EM MULTIPLOS COMPONENETES DE ALTO NIVEL QUE PODEM SER TRABALHADOS  DE FORMA INDEPENDENTE.
->SUPORTA MULTIPLOES CONTROLADORES COM O MESMO NOME - DESDE QUE TENAM AREAS DIFERENTES.


### EXMPLO DE ESTRUTURA DE UM PROJETO MVC COM ÁREAS.

NOME_PROJETO
AREAS
  - PRODUTOS
      CONTROLLERS
	     HOMECONTROLLER.CS
		 MANAGECONTROLLER.CS
	  VIEWS
		HOME.CS
		   INDEX.CSHTML
		MANAGE
			INDEX.CSHTML
    SERVICES
		CONTROLLERS
		   HOMECONTROLES
		VIEWS
			HOME
			INDEX.CSHTML



=> O PROJETO CONTÉM
A AREA "PRODUTOS"
		CONTROLLERS
		VIEWS
A AREA  "SERVICES"
		CONTROLLERS
		VIEWS



=> DECLARAR QUE UM CONTROLADOR É DE UM DETERMINADA AREA.

EX:

[AREA("PRODUTOS")]

PUBLIC CLASS HOMECONTROLLER : CONTROLLER 
{....}

OU SEJA O HOMECONTROLLER ESTA A "AREA" PRODUTOS.

DICAS:
PASSO 1 = DEFINIR A HERARQUIA DE PASTAS.
PASSO 2 = DIZER AO MVC QUAL AREA  CADA CONTROLADOR PERTENCE.
PASSO 3 =DEPOIS DEFINIR A ROTA  => areaRouter

ex:
app.UseMvc(routers =>
{
	routes.MapRoute(name: "areaRoute",
	template:"{area:exists}/{controller=Home}/{action=Index}");
});


=>GERANDO LINKS PARA ÁREAS <=
<A ASP.AREA="" ASP-CONTROLER="HOME", ASP-ACTION="INDEX">
</A>

exemplo real com areas:
<A ASP.AREA="Produtos" ASP-CONTROLER="HOME", ASP-ACTION="INDEX">
Produtos
</A>

Exemplo:
@html.ActionLink("Produtos","Index","Home" , new {area = "Produtos"})



##########################################################
AULA 55 - USANDO AREAS : CRIANDO UMA ÁREA ADMINISTRAÇÃO
##########################################################

--DEFININDO UM AREA ADMIM COM CONTORLADORES E VIEWS
--PARA GERENCIAR OS LANCHES , CATEGORIAS E PEDIDOS
--DEFINIR A ROTA NO ARQUIVO Startup
-DEFINI NOVO LAYOUT.


:: PASTA VIEW ::
CRIAMOS DOIS ARQUIVOS 
1- RAZOE VIEW START (_ViewStart.cshtml)
 - AQUI DEFINI O LAYOUT QUE VAMOS USAR, POSSO USAR O QUE JA EXISTE MAS PRECISO COLOCAR O CAMINHO DO ARQUIVO COMPLETO.
EX:"_Layout" COLOCAR O CAMINHO COMPLETO DE OUTRO LAYOUR CASO EU QUEIRA USA-LO.
@{
    Layout = "_Layout";
}

2- RAZOR VIEW IMPORTS (_ViewImports.cshtml)
-- COPIO E COLO O MESMO CONTEUDO DO "_ViewImports.cshtml"  QUE FOI CRIANDO NO PROJETO 
PRINCIPAL.

:: CRIANDO AREA  NO ARQUIVO STARTUP:: 
PARA FUNCIONAR PRECISO CRIAR UM ROTA DA AREA.

:: CRIANDO   ::
CONTROLE PASTA   	= Admin
INDEX E SUA VIEW   	= Pasta View

:: CRIANDO UM PAGINA DE LAYOUT.
ADDIONAT O ITEM "RAZOR LAYOUT"    / mvc view layout page
_LAYOUT.cshtml




##########################################################
AULA 56 - ÁREA ADMINISTRAÇÃO: GERENCIANDO PEDIDOS,LANCHES
CATEGORIA
##########################################################

:: CRIANDO OS CONTROLES
VAMOS USAR O SCAFOLDER = MVC CONTROLLERS WITH VIEWS, USING ENTITY FRAMEWORK.

AdminCategoriasController



##########################################################
AULA 57 - AJUSTE DE SEGURANÇA - 1
CURSO ASP NET CORE MVC
##########################################################

CORRIGINDO PROBLEMAS DE SEGURANÇA:
1-QUALQUER USUARIO QUE ESTEJA LOGADO PODE ACESSAR A AREA DE ADMINISTRAÇÃO
2-AO FAZER LOGOFF O CARRINHO DE COMPRAS DO USUARIO CONTINUA A SER EXIBIDO , E ELE PODE ACESAR MEMSO NAO ESTANDO LOGADO.


:: SOLUÇÃO DO PROBLEMA 1 ::
1-VAMOS CRIAR PERFIS(ROLES) DE USUARIOS E ATRIBUIR OS PERFIS AOS USUARIOS.
  - CRIAR DOIS PERFIS (ROLES): Admin  e Member (tabela usuada: AspNetRoles)  - cadsastro de perfis ex: Admin , coordenador etc..
-O PERFIL "Admin" será atribuido ao usuario "administrador" na inicialização da aplicação quando sua criação. (tabela: AspNetUserRoles) / usuarios e regras

-O PERFIL "MEMBER" SERÁ ATRIBUIDO A TODOS OS USUARIOS QUANDO FIZERAM O REGISTRO (TABELA: AspNetUserRoles)


:: APOS TODO PROCESSO ACIMA ::
VAMOS USAR =>[Authorize(Roles = "Admin")]

- SOMENTE PODERÃO ACESSAR A AREA ADMINISTRATIVA OS USUARIOS COM O PERFIL IGUAL A "ADMIM"

O QUE PRECISAMOS FAZER DEPOIS: 
- NOS CONTROLADORES VAMOS APLICAR O [Authorize(Roles = "Admin")] TODOS DA AREA ADMIN.


::  DEFININDO CLASSE DE PERFILS   OU SEJA CRIAR A CLASSE "SeedData"

-DEFINIR OS PERFIS A SEREM CRIADOS :Admin, Member e Financeiro
-criar os perfils caso nao exista
-criar um superusuario com base em dados obtidos no arquivo    "appsettings.json"
-atribuir o perfil "admin" ao superusuario (poweruser)


:: QUANDO VAMOS CHMAR A CLASSE SEEDDATA  ? ::
-VAMOS CHAMAR A CLASSE SEEDDATA NA INICIALIZAÇÃO DA APP.
OU SEJA ESSA AÇÃO SO VAI OCORRER UM UNICA VEZ.
--  FAZER A CHAMADA NA CLASSE  PROGRAM.CS

-- INCLUIR LINK "ADMIN" NO MENU EXIBINDO SOMENTE PARA USUARIOS COM PERFIS A "ADMIM"  (ARQUIVO : _LOUYOUT.CSHTML)

VAMOS USARR:
@IF(uSER.ISINROLE("admin")){

	mostra o link admin no menu
}



:: SOLUÇÃO DO PROBLEMA 2 ::

- VAMOS EXIBIR O CARRINHO DE COMPRA SOMENTE PARA OS USUARIOS QUE ESTIVEREM "AUTENTICACADO"
(ARQUIVO: _LAYOUT.CSHTML)



:: CRIAR TELA PADRÃO PRA USUARIO QUE NAO TEM PERMISSAO ::

-CRIAR UM METODO ACTION "ACCESS DANIED" EM HOMECONTROLLER
-CRIAR O METODO ACTION E SUA RESPECTIVA VIEW PARA EXIBIR MENSAGEM AOS USUARIOS QUE NAO TEM PERMISSÃO DE ADMINISTRADOR E TENTAM ACESSAR A AREA "ADMIN"




##########################################################
AULA 57 - AJUSTE DE SEGURANÇA - 2
CURSO ASP NET CORE MVC
##########################################################



##########################################################
AULA 58 AJUSTE PARA VERSÃO 3.1
#########################################################
foi criado uam classe de extensão para ser usada no
progrma.cs

classe: MetodoExtensao
metodo:CreateAdminRole


##########################################################
AULA 60 AJUSTE de seguranca 3
#########################################################

--CRIANDO VIEW DE ACESSO NEGADO
--USARIO NAO PODE ACESSAR CARRINHO DE COMPRA SE NAO TIVER AUTENTICADO


Download do Projeto da versão ASP .NET Core 2.0
Faça download do projeto e abra no Visual Studio 2017 Community

O .NET Core SDK 2.0 precisa estar instalado


##########################################################
AULA 62 roteiro para migar para 3.1 ASPNET CORE
#########################################################

VERSÃO DO CURSO ASPNET CORE 2.0
MIGRAR PARA  3.1

OPÇÕES:
1-PARTI DO PROJETO JA CRIADO E SEGUIR AS ORIENTAÇÕES DA DOCUMENTAÇÃO PARA MIGRAÇÃO  FAZENDO AS ALTERAÇÕES
-PROCURAR NO GOOGLE  ASP NER CORE MIGAR 2.0 PARA 3.0
A- MIGAR DA VERSÃO 2.0 PARA 2.1
B- MIGAR DA VERSÃO 2.1 PARA 2.2
A- MIGAR DA VERSÃO 2.2 PARA 3.0

2-CRIAR UM NOVO PROJETO NA VERSÃO MAIS ATUAL E MIGRAR TODOS OS RECURSO IMPLEMENTANDO FAZENDO OS AJUSTES.
PASSOS:
CRIAR PROJETO  ASP NET CORE MVC NO NET CORE 3.1
USAR A VERSÃO MAUS ATUAL DO VISUAL STUDIO 2019
TODAS AS BIBLIOTECAS DE COMPONENTES  NECESSARIAS DEVERÃO USAR A VERSÃO 3.1]
OU SEREM COMPATIVEIS COM A .NET CORE 3.1

:: PRINCIPAIS MUDANÇAS ::
ALTERAÇÃO NA DEFINIÇÃO DO ROTEAMENTO USADO NA APLICAÇÃO
ALTERAÇÃO NO CÓDIGO DA INICIALIZAÇÃO DA APLICAÇAO NA CLASSE "PROGRAM.CS"
OS NOVOS PROJETOS USAM A VERSÃO 4.3.1 DO BOOTSTRAP.

AMBIENTE DE DESENVOLVIMENTO:
.NET CORE 3.1
VS 2019

::DEPENDENCIAS USADAS NO PROJETO VERSÃO 3.1 - PACOTES::
-MICROSOFT.ENTITYFRAMEWORKCORE.SQLSERVER 3.1.3
-MICROSOFT.ENTITYFRAMEWORKCORE.TOOLS 3.1.3     					(TRABALHA COM O MIGRATION)
-MICROSOFT.VISUALSTUDIO.WEB.CODEGENERATION.DESIGNER 3.1.1 	(USADO PATA CRIAÇÃO DOS CONTROLES E VIEWS)
-MICROSOFT.ASPNETCORE.IDENTITY.ENTITYFRAMEWORKCORE 3.1.3


:: EXEMPLO DE CRIAÇÃO O VISUAL STUDIO  ::

ESCOLHER => ASP.NET CORE WEB APLICATION

ESCOLHER => NET.CORE   E ASP.NET CORE 3.1
TIPO DO PPROJETO:
TEMOS API,WEB APLICATION ,ANGULAR E WEB APLICATION (MODEL-VIEW- CONTROLLER)
-ESCOLHER => WEB APLICATION (MODEL-VIEW- CONTROLLER)
OBS: 
DEIXAR MARCADO A OPÇÃO "CONFIGURE HTTPS"


###############################################################
AULA - 64. Ajuste do método List do controlador LancheController
###############################################################

comentado : nao tem boas praticas
//if (string.Equals("Normal", _categoria, StringComparison.OrdinalIgnoreCase))
//    lanches = _lancheRepository.Lanches.Where(p => p.Categoria.CategoriaNome.Equals("Normal")).OrderBy(p => p.Nome);
//else
//    lanches = _lancheRepository.Lanches.Where(p => p.Categoria.CategoriaNome.Equals("Natural")).OrderBy(p => p.Nome);


--novo
lanches = _lancheRepository.Lanches
	   .Where(p => p.Categoria.CategoriaNome.Equals(categoria))
	   .OrderBy(p => p.Nome);
#########################################################################
AULA - 65  ajuste para exibição do menu  completo no carrinho de compras
#########################################################################

USAMOS A VIEWCOMPONENTE CategoriaMenu na 
index.cshtml do carrinho de compra para carregar a lista de todas as categorias.

@await Component.InvokeAsync("CategoriaMenu");

#########################################################################
AULA - 66  roteiro para implementacao da paginação e filtro
filtro de pedidos e lanches
#########################################################################
sera feita na area  administrativas
1 opção : usando pacotes de terceiros

package: reflectionIt.Mvc.Paging  - version 4.0.0
1-implementar a paginação
2-filtro e procura de dados.


PASSO 1:
1-INSTALAR PACOTE
2- E INCLUIR O RECRUSO NO MÉTODO "CONFIGURESERVICE()"
CONFIGURAR O ARQUIVO STATUP "CONFIGURESERVICE".
3-no controlador vamos alterar o metodo action referente a view onde vamos implementar a paginação.
4- NA VIEW ONDE VAMOS IMPLEMENTAR A PAGINAÇÃO , VAMOS INCLUIR @MODEL reflectionIt.Mvc.Paging.PAGINGLIST<LANCHEMAC.MODELS.LANCHE>
 - CRIAR O FORMULA DE VAMOS COLCOAR OS PARAMETROS.
 
5- NO ARQUIVO _VIEWIMPORTS.CSHTML
 VAMOS INCLUIR (@USING REFLECTIONIT.MVC.PAGING E ADDTAGHELPER*, reflectionIt.Mvc.Paging) 
 
"ASQUERYABLE" = USAMOS AS  ASQUERYABLE EM UMA CONSULTA EXISTENTE E APLICAMOS OUTRAS TRANSFORMAÇÕES , COMO APLICAR UM FILTRO OU ESPECIFICAR UMA ORDEM DE CLASSIFICAÇÃO
ESSAS INSTRUÇÕES ÇAMBDA SÃO CONVERTIDAS EM ÁRVORES DE EXPRESSÃO


#########################################################################
AULA - 67 IMPLEMENTANDO A PAGINA E FILTRO
#########################################################################

- VAMOS ALTERAR AS CONTORLES DE
PEDIDOS E LANCHES 
VIEWS DE 
PEDIDO E LANCHES 

APENAS DA AREA ADMIN


#########################################################################
AULA - 68 EXIBINDO DETALHES DO PEIDOD NA AREA DE ADMINISTRAÇÃO
#########################################################################
PRA ISSO CRIAMOS UMA "VIEW MODEL"
PedidoLancheViewModel PARA MOSTRA O PEDIDO E SEUS DETAHES.

QUAL O PROPOSITO DE UMA VIEW MODEL?
SERVE PARA MOSTRAR OS DADOS EM UMA VIEW DE UM OU MAIS MODELOS.
NESSE CASO DE "PEDIDO" E "DETALHESPEDIDO"  OU SEJA 2 TABELAS 
DIFERENTES... REPRSENTADAS EM CLASS NO MODELO ORM.

#########################################################################
AULA - 69 Relatorio de peidods por período
#########################################################################
--ALTERAR A ENTIDADE PEDIDO DA PAS TA MODELS
--CRIAR NOVA PROPRIEDADE.
--VAMOS USAR O 
ADD-MIGRATION ItensPedido
Update-database

1-METODO CHECKOUT
 - calcular o total do pedidod
 -calcular o totla dos itens pedido
 -armazenar o s valroes da tablea pedidos.

2-criar pasta "Serviçoes" na area Admin.
criar classe "relatorioVendasServico"
  - criar o metodo FindeByDateAsync
  
  - temos que registrar o serviço "relatorioVendasService" no arquivo "Startup"
  -retorno os pedidos por intervalo de datas inicial e final
  
 3-criar as views
 -Index.cshtml
 -RelatorioVendasSimples.cshtml
 

#########################################################################
AULA - 70 APRESENTANDO O NET 5.0 E ROTEIRO DE MIGRAÇÃO PARA O 5.0
#########################################################################


O QUE O NET COTE 5.0?
-O OBEJTIVO DO .NET CORE 5.0 É REALZIAR A UNIFICAÇÃO DO AMBIENTE .NET EM UMA ÚNICA PLATAFORMA.

A IDÉIA E CRIAR UMA "BASE CLASS LIBRARY (BCL" COMPARTILHADO QUE TERA MÁQUINAS VIRTUAIS EM DE TEMPO DE EXECUÇÃO.
-- FOI CRIADO O ".NET STANDARD LIBRARY"


- O NET 5.0 OEFERECE SUPORTE A MAS TIPOS D EAPLICATIVOS E PLATAFORMA DO QUE O NET CORE OU .NET.
EX: Iot, AI...

			:: ROTEIRO ::

1-ATUALZIAR O VS PARA VERSÃO 2019 COMMUNITY APRA VERSÃO 16.8.1 OU SUPERIOR
2-INSTALAR O NET 5.0 SDK
3-NO ARQUIVO DE PROJETOP ATUALIZAR O TARGETFRAMEWORK.
TIRAR P: <TARGETFRAMEWORK>NETCOREAPP3.1</TARGETFRAMEWORK>
COLOCAR:<TARGETFRAMEWORK>NET5.0</TARGETFRAMEWORK>
4-ATUALIZAR OS PACOTES USADOS NO PROJETO PARA A VERSÃO 5.0


BAIXAR:
NET 5.0 DOWNLOAD  ()
DOWNLOAD .NET 5.0 (LINUX,).MAC,WINDOWS)

https://docs.microsoft.com/pt-br/aspnet/core/migration/31-to-50?wiew=aspnetcore-5.0&tabs=visual-studio

::MELHORIAS::
1-melhorias no model binding mvc, incluindo suporte paa tipos record do c#9
2-suporte e melhorias no "Blazor server" e no blazor WebAssembly
3- suporte integrado para OpenAPI e Swagger UI para WebApis.
4-filtros de Signar HUB e invocaçãoes de hub paralelas]
5-melhorias desempenhpo e mlehor alocação de memoria.
6-atualização automatica do navegador com dotnet watch
7-melhorias de desempenho no "http" e"grpc"
...

#########################################################################
AULA - 71  MIGRAÇÃO PARA O 5.0
NAO VOU FAZER AGORA..
#########################################################################
cmd
dotnet --version
dotnet --list-sdks

O MACORATTI EM UM ARTIGO PARA MUDAR O SDK...

1-ALTERAR O ARQUIVO DE PROJETO EX:
LANCHEmAC.CSPROJ     (ESCOLHER O EDIT PROJECT FILE) PARA ABRIR O ARQUIVO.
2- ATUALIZAR OS PRINCIPAIS PACOTES.






######### #########  REFORÇO ########################

SEÇÃO 6:AUTENTICACAO E AUTORIZACAO - IDENTITY

DICAS:
-AUTENTICAÇÃO: É A VERIFICAÇÃO DE UMA IDENTIDADE FEITA PELA COMPARAÇÃO DAS CREDENCIAS APRESENTADAS COM OUTRAS PRÉ-DEFINIDAS.
OU SEJA SERVE PRA DIZER QUEM É O USUARIO.
-USAMOS UM RECURSO CHAMADO IDENITY, TEMPLA JÁ PRONTO, ao escoluer o projeto clicamos em "change authentication" 
e escolhemos a opção "individual user accounts"

APOS CRIÇÃO DO PROJETO TEMOS:
ACCOUNTCONTROLLER.CS
MANAGERCONTROLLER.CS  =  PARA ADMINISTRAR ALTERAR SENHA/CRIAR/DESABILITAR

PASTA MODELS
VAIR SER CRIADA VIEWS ESPECIFICAS.
EX: LOGIN

PASTA DATA :
É CRIADO UMA MIGRATION.
PARA CRIAR AS TABELAS NO BANCO QUE SÃO NECESSARIAS.

:: USANDO O IDENTITY




-AUTORIZAÇÃO: OCORRE APÓS A AUTENTICAÇÃO E PERMITE ATRIBUIR E DEFINIR PRIVILÉGIOS AO SUJEITO AUTENTICACADO.
OU SEJA "O QUE O USUARIO PODE FAZER NO SISTEMA"



SEÇÃO 7:ÁREA DE ADMINISTRAÇÃO
































































