#######################
CURSO UDEMY
#######################
launchSettings.json   	= configração do localhost
appsettings.json  		= arquivo de configuracao , seria o equivalente ao web.config, connectionString do banco de dados.
Program.cs  			= inicializa a aplicação onde é feita a configuração do host / servidor.
Startup.cs 				= configura os servicos... que vai ser usado.

-- OBJETIVO DO MVC - BAIXO ACOPLAMENTO... 
MODEL 		-> RESPONSAVEL POR MANTER OS DADOS E A "LÓGICA DE NEGOCIO" DA APP.
VIEW 		-> INTERFACE COM O USUARIO DA APP QUE EXIBE OS DADOS.  
CONTROLLER  -> RECEBE E TRATA AS REQUISIÇÕES(DO BROWSER/USUARIO) E RENDERIZA A VIEW APROPRIADA COM OS DADOS.


MODELO DE MVC :
URL-> não é uma página.
-NO MODELO DE DESENVOLVIMENTO MVC UMA "URL" CORRESPONDE A UMA "AÇÃO" DE UM "CONTROLER" E NÃO UMA PÁGINA EM DISCO..
-NO MODELO DE DESENVOLVIMENTO MVC  AS REQUISIÇÕES DO NAVEGADOR (USUÁRIO) SÃO MAPEADAS PARA "AÇÕES" DO "CONTROLLER"

EX:
HTTP://LOCALHOST/HOME/INDEX 
HOME 	= CONTROLLER
INDEX 	= ACTION/ AÇÃO


###################FUNCIONAENTO DO PROJETO###############

ARQUIVO:
Startup: -> função -> ConfigureServico


PASTA SHARED  = ARQUIVOS / LAYOUT COMPARTILHADO EX: BARRA DE MENU.
TAMBÉM OS JS,JQUERY E BOOTSTRAP.


PROJETO.CSPROJ = MOSTRA AS DEPENDEÇAS DO PROJETO.


##########################################################

MIGRANDO - PARA VERSÃO 3.1 DO CORE.

##########
MODELO
##########
CRIANDO O MODELO DE DOMINIO
-SÃO AS CLASSES QUE REPRESENTAM A SUA LÓGICA DE NEGÓCIO.
EX: PRODUTO.CS / CLIENTE.CS / CIDADE.CS ETC.

###################################
	AULA 11 - ENTITY FRAMEWORK CORE
####################################
Ferramento que permite ao desenvolvedor trabalhar com dados relacionais na forma de objtos especificos do domonio.

OBJETOS     |   MAPEADOR OBJETO      / BANCO DE DADOS.


DBCONTEXT    						  |  DBSET
REPRESENTA BANCOD DE DADOS			 	TABELAS

LINQ -> DBCONTEXT  -> DBSET
	    DBCONTEXT  <- DBSET		

AÇÕES: DO ENTITY
ALTERAR,EXCLUIR E INCLUIR


############
CODE FISRT   /MODELO USADO NO RCI...
###########
CRIAMOS AS CLASSES DE DOMINIO E O ENTIRY FRAMEWORK CRIAR O BANCO/TABELAS


##############
DATABASE FISRT
##############
PARTIMOS DO BANCO DE DADOS JÁ EXISTENTES E USAMOS O ENTIRY FRAMEWORK CORE OARA GERAR AS CLASSES DE DOMINIO.

		
######################################################################
	AULA 12 - CONFIGURANDO O ENTITY FRAMEWORK CORE
#######################################################################
ADD PACOTES:
MICROSOFT.ENTITYFRAMEWORK.CORE 3.1.3.
MICROSOFT.ENTITYFRAMEWORK.SQLSERVER 3.1.3.
MICROSOFT.ENTITYFRAMEWORK.TOOLS 3.1.3.
Microsoft.VisualStudio.Web.CodeGeneration.Design 3.1.3.


DBCONTEXT 	=  REPRESENTA A SESSÃO COM O BANDO DE DADOS.
DBSET 		= REPRESENTA O MAPEAMENTO  PARA A TABELAS DO BANCO DE DADOS.

APPSETTING.JSON  = STRING DE CONEXÃO COM  BANCO DE DADOS.

############################################################
REGISTRAR NO ARQUIVO  "STARTUP" O CONTEXTO COMO SERVIÇO.
#########################################################
EX:
SERVICES.AddContext<AppDbContext>(
options = > options.UseSqlserver(Configation.GetConnectionString("DefaultConnection")))
)

Startup.cs:
onde configurações a contexto e conectionstring.


######################################################################
	AULA 13 - AJUSTE CONFIGURANDO O ENTITY FRAMEWORK CORE
#######################################################################


######################################################################
	AULA 14 - USANDO O DATA NOTATION
#######################################################################
RECURSO USADO PARA VALIDAR ENTRADA DE DADOS E TAMBÉM PODEMOS USAR 
COM REGRA DE NEGOCIO 
EX: VALIDAR CARTÃO DE CRÉDITO , CPF, EMAIL.


######################################################################
	AULA 15- AJUSTO DATA  NOTATION
#######################################################################
COLOCAR NAS PROPRIEDADE
[COLUMN(TypeName="decimal(18,2)")]
public decimal Preco {get;set;}


######################################################################
	AULA 16- USANDO EF  CORE MIGRATION
######################################################################
Gerencia o versionamento do banco de dados.

Métodos:
add-migration nome_migração        - cria script
update database       			   - aplica o script no sqlserver (banco)
remove-MIGRATION 					= desfazer a ação feita.


######################################################################
	AULA 17- POPULANDO BANCO DE DODOS COM MIGRATION
######################################################################
USAMOS O MIGRATION PARA MANIPULAR AS TABELAS SEJA OS DADOS.
Criamos mi grationa -> 20200522204440_PopularTabelas
Os dados foi criando via migration.
Esse cenario é bom como quero criar paramentros de alguns tabelas de 
sistemas.

######################################################################
	AULA 17- AJUSTE - POPULANDO BANCO DE DODOS COM MIGRATION
######################################################################


######################################################################
	AULA 20- IMPLEMENTANDO O PADRÃO REPOSITORY
######################################################################

::  FLUXO REQUISIÇÕES  ::
SENARIO ACEITO - PARA DIMINUIR O ACOPLAMENTO.   "PADRÃO REPOSITORY"
[IIS] -----> [CONTROLLER] -----> [REPOSITORY] ----> [EF CORE] ---> (BANCO DE DADOS)

O QUE É O PADRAO [REPOSITORY]
È UM PADRÃO ESTRUTURAL QUE SEPARA A SUA "LÓGICA DE DOMINIO" DA SUA LÓGICA DE "ACESSO A DADOS".
PODEMOS USAR O PADRÃO REPOSITORY PARA DESACOPLAR O "MODELO DE DOMINIO" DO "CÓDIGO DE ACESSO A DADOS".
VANTAGENS:
1-DESACOPLA A SUA APLICAÇÃO DA LÓGICA DE ACESSO A DADOS.
2-CENTRALIZA O SEU CÓDIGO PARA CONSULTAS  E ACESSO AOS DADOS.
3-FACILITA OS TESTES UNITÁRIOS.
4-MINIMIZA A DUPLICIDADE DE CODIGO NAS CONSULTAS.


:: COMO IMPLENTATAR O PADRAO REPOSITORY ::
Implementação.

[INTERFACE]										<--------------- [CLASSE  CONCRETA]  a classe concreta vai herda os metodos da interface
NA INTERFACE DEFIMOS TODOS OS "MÉTODOS" QUE VOU USAR.

Exemplo com os dominios - Lanche e Categoria
[ILancheRepository] 	<----- [LancheRepository]  		= HERDA A INTERFACE
[ICategoriaRepository] 	<----- [CategoriaRepository] 	= HERDA A INTERFACE



######################################################################
	AULA 20- IMPLEMENTANDO O PADRÃO REPOSITORY
######################################################################
[ILancheRepository] 	<----- [LancheRepository]  		= HERDA A INTERFACE
[ICategoriaRepository] 	<----- [CategoriaRepository] 	= HERDA A INTERFACE
Nesse contexto que esta referenciando o EF é o repository.


::: IMPORTANTISSIMO  ::
QUANDO USAMOS UMA "INTERFACE" PRECISAMOS FAZER UM "INJEÇÃO DE DEPENDENCIA" PARA USA-LO NO "CONTROLADOR".
OU SEJA QUANDO "DEFINIMOS UMA INTERFACE E SUA IMPLEMENTAÇÃO" TEMOS QUE "REGISTRAR ISSO COMO UM "SERVIÇO"
PRA FAZER "INJEÇÃO DE DEPENCIA NO CONTROLLER".

::: COMO CRIAR O SERVIÇO.
    FAZEMOS ISSO NA CLASSE "STARTUP.CS"
	
TEMOS:
1-AddTransient  => Significa que o serviço vai ser criado cada vez que ele for solicitado.
3-AddSingleton  => Significa que vai ser criado na primeira que for solicitado. ou seja toda as as requisições vai ter esse mesmo objeto.
2-AddScoped  	=> Significa que o serviço é criado uma  vez pra cada solitação.


ex:
//Registrando como serviço minhas interfaces pra ser usado nos controles... 
//specified = especificado  / transient = transitorio
services.AddTransient<ICategoriaRepository, CategoriaRepository>();
services.AddTransient<ILancheRepository, LancheRepository>();

Apos isso , chamamos por denpencia o serviço no controller.

######################################################################
	AULA 21- CRIANDO CONTROLLER E VIEW PARA MOSTRAR OS LANCHES...
######################################################################
Criando a  injecção de pencendia entre contoller e serviço.

EX:
private readonly ILancheRepository _lancheRepository;
	private readonly ICategoriaRepository _categoriaRepository;

	public LancheController(ILancheRepository lancheRepository,
		ICategoriaRepository categoriaRepository)
	{
		//injeção de pendencia das interfaces...
		// quando o controlador for chamar ILancheRepository , como eu tenho um serviço registrado pra ele , vamos recuperar a instancia da implementação da interface => "lancheRepository"
		_lancheRepository = lancheRepository;
		_categoriaRepository = categoriaRepository;

	}
	

::: TIPOS DE RETORNO ::
IActionResult  = RETORNA UM ActionResult  QUE PODE SER UMA ViewREsult, pode ser diversoes tipos de retorno.


######################################################################
	AULA 22- AJUSTANDO O CODIGO DA  VIEW LIST
######################################################################
O QUE SIGNIFICA=>
@model IEnumerable<LanchesMac.Models.Lanche>
@model = Ultilizada para especificar o tipo que vamos usar na view.
No caso acima fala que esotu usando uma lista do tipo "lanches".
Outro exemplo de uso:
@using LanchesMac.Models
@model IEnumerable<Lanche>

@model => é apenas a diretiva que aponta para o tipo lanche.
Model  => é ultilizada apenas para acessar o tipo que é passada na view.
Ou seja permiti acesso ao "a lista do tipo lanche". è a properidade que acessa o tipo.

############################################################################
	AULA 23 QUAL O PAPEL DOS ARQUIVOS _ViweStart,_ViewImports e o BOOTSTRAP
############################################################################
-Layout.cshtml  = comum para todas as telas, ou seja é um arquivo que mostrado em 
todas as telas ex: rodade,footer etc...logo...menu
Carregamos os arquicos de style css..

No @RenderBody() = è onde as telas(views) é renderizada.

_ViweStart = È Através do _ViweStart que => as views sabe qual é o "arquivo de layout" que ele tem que utilizar.


_ViweImports.cshtml =   O objetivo dele é conter todas as referenças e import comum em todas as "VIEWS"
Ex:
@using LanchesMac   		= referencia o projeto 
@using LanchesMac.Models 	= referencia a model 
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers  = significa que a ultilização das tags helper estão habilitadas.

############################################################################
	AULA 24 			VIEW MODEL
############################################################################
É UM PADRÃO QUE PERMITE SEPARAR AS RESPONSABILIDADES  ENTRE MODELS DE DOMINIO
E OS MODELS QUE ATENDEM AS WIEWS.

PERMITE "MODELAR" ENTIDADES A PARTI DE UM OU MAIS "MODELS" EM UM UNICO OBJETO QUE SERÃO REPRESENTADOS
NA VIEWS.
"MODELS DE DOMINIO" REPRESENRA O MODELO DE NEGOCIO.

1-SENARIO  = TEMOS QUE APRESENTA A VIEW INFORMAÇÕES ORIUNDAS DE 2 OU MAIS MODELOS,
NESSE CENARIO A "VIEWMODEL" NOS AJUDA. PODE CAPSULAR VARIOS MODELS EM UM OBJETO.

BENEFICOS DA VIEWMODEL.
1-NAO PRECISA ALTERAR UMA CLASSE "MODEL"  PARA ATENDER AS NECESSIDADES DE UMA VIEW.
2-AGRUPAR INFORMAÇÇÕES  DE UMA OU MAIS "MODELS" EM UMA UNICA CLASSE, POUPANDO NECESSIDADE DE FAZER VARIAS CONSULTAS.
3-UM DADO NÃO CONTIDO NO "MODEL" DE DOMINIO PODE SER FIALCIMENTE TRANSPORTADO PARA VIEW MODEL.
4-cada viewmodel possui uam view tipada.
5-atua como modelo pra view.
6-contem a logica de interface e a referencia ao model.

dica:
se exxistem informações em seu model que são ultilizados somente pelas views entao o seu Model esta com a responsabilidade 
também de cuidar da camada de apresentação.
o melhor é criar uma viewmodel.


############################################################################
	AULA 25 			IMPLEMENTANDO A VIEW MODEL
############################################################################
Posso usar nos meus controles a "viewmodel" para recuperar os dados , ao invés
de usar a "model" direta.
Ao invés de usar  a conexão direta com a model, podemos usar uma viewmodel para
desacoplar.



############################################################################
	AULA 26 		PARTIAL VIEWS
############################################################################
UMA PARTIAL VIEW É UAM VIEW QUE É "RENDERIZADA" EM OUTRA => VIEW.
ELAS SÃO USADAS PARA ENCAPSULAR A LÓGICA REUTILIZADA NAS  VIEWS
PERMITINDO SIMPLIFICAR A COMPLEXIDADE DAS VIEWS.
ELAS PODEM SER USADAS EM MULTIPLAS VIEWS ONDE É NECESARIO
UMA LÓGICA SIMILAR EVITANDO ASSIM A DUPLICIADADE DE CODIGO.
-POSSUI A EXTENSÃO .CSHTML
-SAO RENDERIZADAS DE FORMA DIFERENTE (NÃO EXECUTAM _ViweStart.CSHTML

############################
REFERENCIANDO PARTIAL VIEWS
############################
Exemplo 1 => mais usual
@HTML.PARTIAL("NomeDaView")                           ->  Retorna um IHTMLSTRING

Exemplo 2Da
 Html.RenderPartial("NomeView");
} 
Não retorna um resultado. 
Transmite a saida renderizada diretamente para a resposta.


########################################
ACESSANDO DADOS NAS PARTIAL VIEWS
########################################
QUANDO UMA PARTIAL VIEW É INSTANCIADA ELA OBTÉM UMA CÓPIA DO VIEWDATA DA VIEW PAI.
EX:
@Html.Partial("NomeDaView", ViewData)
@Html.Partial("NomeDaView", model)

Podemos usar: partial,RenderPartial,PArtialAsybc e RenderPartialAsync
Obs:
As atualziações feitas nos dados da "PARTIAL VIEW", não são mantidas na view principal.
o viewdata alterado em uma partial view é perdido quando ela retorna.

########################################
LOCALIZANDO PARTIAL VIEWS
########################################

@Html.Partial("NomeView")=> usa a view autal na pasta com este nome, s enada for encontrado, procura naá
pasta shared.
@Html.Partial("NomeView.cshtml"), uma view com este nome deve existir na mesma pasta.
@Html.Partial("~/views/folder/NomeView.cshtml")=> Caminhos que iniciam com "/" ou "~/" refere-se á raiz da aplicação.


########################################
AUALA 27/28 - IMPLEMENTANDO PARTAIL VIEWS
########################################

A PARTI DA VERSÃO 3.1
TEMOS O JELP PARTIAL.
<PARTIAL NAME="_LanchesResumo" for="@lanche"/>

name=indica o noem ou caminho da partial view.
for=Atributo que permite passar um model para paetial view.


 
########################################
AULA - 29 CARRINHO DE COMPRA.
########################################
criamos a classe "carrinhoCompraIem"
e geramos o migration pra criar a tabela no banco.
add-migration "carrinhoCompraIem"
update-database  -- pra criar no banco...

##########################################
AULA - 30 SESSAO E O ESTADO DA APLICAÇAO.
##########################################

PROTOCOLO HTTP -  PROTOCOLO SEM ESTADO
ASP.NET  CORE
PACOTE DA MICROSOFT ->SESSION : MICROSOFT.ASPNETCORE.SESSION. 

COM BASE EM UM DICIONARIO OU TABELA HASH BO SERVIDOR, O ESTADO DA SESSÇAO PERSISTE OS DADOS ATRAVÉS DAS REQUISIÇÕES DE UM NAVEGADOR.
O ASP.NET CORE MANTEM O ESTADO DA SESSÃO , DANDO AO CLIENTE UM COOKIE QUE CONTEM UM "ID" DA SESSSÃO, QUE É ENVIADO AO SEEVIDOR COM CADA SOLICITAÇÃO.
PODEMOS USAR O "ESTADO DA SESSÃO" PARA GUARDA DADOS USUARIO ENQUANTO ELE NAVEGA NA APLICAÇÃO.

OS DADOS FICAM ARMAZENADO NO CACHE....


OS COOKIE DE SESSÃO TEM UM TEMPO DE VIDA, SÃO EXCLUIDO QUANDO A SESSÃO DO NAVEGADOR TERMINA.


O SERVIDOR MANTEM UMA SESSÃO POR TEMPO LIMITADO APÓS A ÚLTIMA REQUISIÇÃO.
VOCE PODE DEFINIR O TEMPO LIMITE DA SESSÃO OU USAR O VALOR PADRÃO QUE É DE 20 MINUTOS.
O ESTADO DA SESSA~P É IDEAL PARA ARMAZENAR DADOS DO USUÁRIO ESPECIFICO DE UMA DETERMINADA SESSÃO, FICAM NO CACHE
E VÃO SER EXCLUINDO QUANDO : A SESSÃO EXPIRAR OU SE USAR O RECURSO SESSION.CLEAR();

ONDE CONFIGURAMOS:
CLASSE "STARTUP" DEVE CONTER.   IDistributedCache
chamada da  => AddSession em configureSerevice()
chamada da  => UseSessin em configure()

ex:
Public void ConfigureServies(IServiceCollection services)
{
  //Adiona uma implementação padrão de IDistributedCache.
  servives.AddDistributedMemoryCache();
  services.AddSession();
}

public void Configure(IApplicationBuider app, IHosttingEnvironment){
	
	app.UseSession();
	app.Run(async(context)=>{
			
			await context.Response.WriteAsync(msg.GetMensagem());
	});
}

Exemplo de como armazena dados na sessão.

-criando variavaes
const string SessionKeyNome="_Nome";
const string SessionKeyIdade ="_Idade";

--Fazendo atribuições na sessão
httpContext.Session.SetString(SessionKeyNome,"ednaldo");
httpContext.Session.SetInt32(SessionKeyIdade,37);

--recuperando os dados da sessão.
var nome = context.Session.GetString(SessionKeyNome);
var idade = context.Session.GetString(SessionKeyIdade);


################################################
AULA - 31 IMPLEMENTANDO O CARRINHO DE COMPRAS
################################################
Configrando a session e serviços do carrinho.

CarrinhoCompraItem.cs ->representa um lanche selecioando
-CarrinhoCompra.cs -> representa uma coleção lanches selecionados
-GetCArrinho=> ontem ou cira um carrinho de compra na sessão
-AdcionarAoCarrinho => Adcionar um lanche ao carrinho
-RemoverAoCarrinho=> remove um lanche do carrinho
-GetCarrinhoCompraItens=> retorna os itens do carrinho de compra
-LimparCarrinho=> remove todos os itens do carrinho
-GetCarrinhoCompraTotal - calcula o total do carrinho.

 
 ### ARQUIVO SETUP ###
services.AddTransient<ICategoriaRepository, CategoriaRepository>();  // =>transient , significa que o objeto vai ser criado toda vez que for chamado, criando um novo objeto desse servico.
services.AddTransient<ILancheRepository, LancheRepository>();
services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();   //=> AddSingleton   => é instanciado uma única vez... ou seja todas as chamadas "requisições" obtém o mesmo objeto.
services.AddScoped(sp => CarrinhoCompra.GetCarrinho(sp));             //=> é criado instancia diferentes do objeto pra cada requisição...

			

############################################################
AULA - 32 IMPLEMENTANDO O CONTROLLER DO CARRINHO DE COMPRAS
############################################################
criar uam viewmodel pra representa a view.





############################################################
AULA - 33 CRIANDO PAGINA INICIAL -LANHCES PREFERIDOS.
############################################################
HOMECONTROLES
DICA:
"PARTIAL VIEW" E VIEW É A MESMA COISA A UNICA DIFERENÇA É QUE UMA PARTIAL VIEW NAO INVOCA O ARQUIVO "WIEW START", QUANDO  É CARREGADA.


############################################################
AULA 34 VIEW COMPONENTS
############################################################

PERMITE CRIAR  FUNCIONALIDADES SEMELHANTES A UM "MÉTODO ACTION" DE UM CONTROLADOR INDEPENDENTE DE UM CONTROLADOR(SÃO SEMELHANTES ÁS PARTIAL VIEW).
CONSITEM 2 DUAS PARTRS: 
1-A CLASSE "DERIVADA DE VIEWCOMPONENTE"
2-O RESULTADO QUE ELA RETORNA UMA VIEW.


CRIANDO UAM VIEW COMPONENTS
1-UMA CLASSE VC PODE SER CRIADA:

A) DERIVADA DE UM VIEWCOMPONENTE
B)DECORANDO A CLASSE COMO O ATRIBUTO  [VIEWCOMPONENT]
C)CRIANDO UMA CLASSE ONDE O NOME TERMINA COM O SUFIXO "VIEWCOMPONENT"

DEVE SER PUBLICA , NÃO ANINHA NEM ABSTRATA
A CLASSE DEVE EXPOR O MEOTODO PULICO "INVOKEaSYNC"
NOME =  NOME_DA_CLASSEVIEWCOMPONENTE  EX: TesteViewComponent


####
RETORNO
####

CRIANDO UMA VIEW COMPONENT (VC)

2-O RESULTADO QUE ELA RETORNA (UMA VIEW).

-A view retornada dever ser criada na pasta:
-Views/Shared/COMPONENTS/nome_vc
-onde o nome é o nome do prefixo usado na VC criada.

EX:
VC "Teste"ViewComponent  
"devera" ter sua view criada na pasta : / View/Shared/COMPONENTS/"Teste"

caso nao seja definido o nome da view , será definido como default.html.

###########################
USANDO UAM VIEWCOMPONENT
##########################

1- A PARTI DE UMA VIEW.
@COMPONENT.InvokeAsync("nome_vc",<tipo anonimo com parametros>)

A PARTI DO ASP.NET CORE 1.1, PODEMOS INVOCAR UMA VC USANDO UMA "TAG HELPER".
EX:
<vc>nome_vc param="...."></vc:nome_vc>
	

DEVEMOS USAR A DIRETIVA @ADDTAGHELPER;"NOME DO ASSEMBLY"
"NOME DO ASSEMBLY"   =  NOME DO PROJETO.


2- PODEMOS USAR USAR TAMBÉM  A PARTI DO  CONTROLADOR.
EX: Return ViewComponent("nome_vc",new {parametros="..."})

Public IACtionResult IndexVC(){
  Return ViewComponent("Lista",new {sequncia de parametros="..."});
}

############################################################
AULA 35 IMPLEMENTANDO UMA VIEW COMPONENTS
############################################################
VC  = VIEWCOMPONENT
OBJETIVO: EXIBIR A QUANTIDADE DE ITENS NO CARRINHO DE COMPRAS NA BARRA DE NEVEGAÇÃO.

1-PASSO:
CRIAR PASTA "COMPONENTE"
DEFINIR CLASSE CarrinhoCompraResumo  , DERIVANDO DE UM ViewC.
DEFINIR O CODIGO DO MÉTODO INVOKE

2- PASSO
CRIAR UMA PASTA COMPONENTS NA PASTA SHARED.
CRIAR A PASTA CarrinhoCompraResumo DENTRO DA PASTA COMPONENTS
CRIAR A VIEW DEFAUT.CSHTML



DICAS:
VIEW COMPONENTS.
PERMITEM CRIAR "FUNCIONALIDADES" SEMELHANTE A UM "MÉTODO ACTION" DE CONTROLLADOR INDEPENDENTE DE UM 
CONTROLADOR. È SEMELHANTE ÁS PARTIAL VIEWS.


CONSSITEM EM DUAS PARTES:
1-A classe (derivada de VewComponent)
2-O resultado que ela retorna "uma view"

Dicas: São reaproveitaveis.
Podemos usar em varias aplicações, ou  usadas em diferentes controladores.
Ex: carinho de compr ou qualquer coisa que quero usar seja em varios comntroladores ou aplicações através de uma bibilioteca.


############################################################
AULA 36 TAG HELPTERS
############################################################
Permite qu eo código do lado do servidor partivcipe na criação e redereização de elementos html em arquivos Razor.
Elas são uam sintaxe alternativa aos html helpers e obtém o mesmo resultado final gerando codigo html.



ex:
TAG HELPER                                  				RENDERIZADO

<input type="text" asp-for="Nome"/>      					<input id="nome" name="nome" tyoe="text" value=""/>
<label  asp-for="E-mail"<label/>         					<label for="Enail">E-mail</label>
<form asp-controller="Conta" asp-action="login"</form>		<form action="/Conta/Login" method="post"> </form>


Dicas:
A diretiva @addTagHelper    - torna as tags helpers disponiveis para um view.

Esse recurso é criado automaticamente no arquivo   Views/_ViewImports.chtml

**************************************
ELEMENTOS PARA USAR O TAG HELPERS:
**************************************
Input tag helper
Text area tag helpers
Validation tag helper
Label tag helper
Select tag helper



############################################################
AULA 37 USANDO A TAG HELPTERS
############################################################
COLOCAR NA VIEWIMPORTS

@addTagHelper LanchesMac.TagHelpers*, LanchesMac


############################################################
AULA  38 DEFININDO UMA NOVA ROTA NA APLICAÇÃO
############################################################

EXIBIR LANCHES POR ACATEGORIA
-REDEFINIR A VIEW LIST.CSHTML
 RETORNANDO LANCHES POR CATEGORIA 
 
-DEFINIR UMA NOVA ROTA
--INLCUINDO  A CATEGORIA.

##
rota padrao
###

app.UseEndpoints(endpoints =>
{
	endpoints.MapControllerRoute(
		name: "default",
		pattern: "{controller=Home}/{action=Index}/{id?}");
});

Caso so esteja usando a roda padrao posso usar o comando abaixo pra substitui o a rota padrao.

app.UseMvcWithDefaultRoute();



##############################
CRIANDO UAM NOVA OUTRA ROTA
##############################

Usamos o metodo :
MaRoute -> usado  para adcionar / criar uma rota na coleção de rotas.
As rotas na coleção routers são ordenadas e serão processadas na ordem na qual foram adcionadas.

MapRoute usar 3 parametros : name,url r default
Name: é o nome da rota
url: é o padrao da URL onde definimos a url e os parametros  entre {}.
default: é o mapeamento padrão;

DICAS: è importante definir a rota na ordem correta.


############################################################
AULA  39/40 
############################################################

DICAS:
VIEW COMPONENTS.
PERMITEM CRIAR "FUNCIONALIDADES" SEMELHANTE A UM "MÉTODO ACTION" DE CONTROLLADOR INDEPENDENTE DE UM 
CONTROLADOR. È SEMELHANTE ÁS PARTIAL VIEWS.


CONSSITEM EM DUAS PARTES:
1-A classe (derivada de VewComponent)
2-O resultado que ela retorna "uma view"

Dicas: São reaproveitaveis.
Podemos usar em varias aplicações, ou  usadas em diferentes controladores.
Ex: carinho de compr ou qualquer coisa que quero usar seja em varios comntroladores ou aplicações através de uma bibilioteca.


aAplicamos o conceito de viewComponents.
criamos a CategoriaMenu.




############1################################################
AULA  41 /42  exibindo detalhes do lanche     -  fazer...
############################################################

-incluir botao para selecionar lanche e link oara exibir detahes do lanche.
1-ajustar partial view _lancheResumo
2-criar método action Details no controlador LancheController.
3-criar ciew  Details.cshtml


[BindNever => a propriedade nao vai ser vinculada ao formulario.
[ScaffoldColumn(false)] => indica que o campo nao vai ser visivel na view.
public decimal PedidoTotal { get; set; }


criando o migration das duas novas tabelas.
add-migration Pedidos
update-database


############1################################################
AULA  43 criando o repositorio e implementação  para o pedido.
############################################################
1-criar interface IpedidoRepository
2-criar classe para implementar a interface  ->  PedidoRepository
   
2- Registrar  o serviço no metodo "ConfigureServices" da classe "Startup" services.AddTransient<IpedidoRepository,PedidoRepository>();



############################################################
AULA  44 - PROCURANDO LANCHES
############################################################
criamos uma action na contoller  Lanhce.
Procurar
ok.



############################################################
AULA  45 - CRIANDO CONTROLADOR PEDIDO
############################################################

GET = OBTENDO DADOS 
POST=POSTAR / GRAVAR/PERSISTI DADOS NO BANCO.





























































































































































